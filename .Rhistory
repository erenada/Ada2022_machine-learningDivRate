plot(tree_object)
gammaStat(tree_object)
is.ultrametric(tree_object)
tree_object <- nnls.tree(cophenetic(tree), tree_object, rooted = TRUE)
tree_object <- nnls.tree(cophenetic(tree_object), tree_object, rooted = TRUE)
plot(tree_object)
is.ultrametric(tree_object)
tree_object <- scale(tree_object, model = "depth", 1)
tree_object <- rescale(tree_object, model = "depth", 1)
times <- as.numeric(branching.times(tree_object))
ConstBD_prior_delta <- function(x) { dexp(x,rate=10.0,log=TRUE) }
ConstBD_prior_delta <- function(x) { dexp(x,rate=10.0,log=TRUE) }
ConstBD_prior_delta <- function(x) { dexp(x,rate=10.0,log=TRUE) }
ConstBD_prior_delta <- function(x) { dexp(x,rate=10.0,log=TRUE) }
ConstBD_prior_tau <- function(x) { dexp(x,rate=10.0,log=TRUE) }
priorsConstBD <- c("diversification"=ConstBD_prior_delta,
"turnover"=ConstBD_prior_tau)
# likelihood function
likelihoodConstBD <- function(params) {
ConstBD_speciation <- params[1] + params[2]
ConstBD_extinction <- params[2]
lnl <- tess.likelihood(times,
lambda = ConstBD_speciation,
mu = ConstBD_extinction,
samplingProbability = 1.0,
log = TRUE)
return(lnl)
}
samplesConstBD <- tess.mcmc(likelihoodFunction = likelihoodConstBD,
priors = priorsConstBD,
parameters = runif(2,0,1),
logTransforms = c(TRUE,TRUE),
delta = c(1,1),
iterations = 10000,
burnin = 1000,
thinning = 10,
adaptive = TRUE,
verbose = TRUE)
DecrBD_prior_delta <- function(x) { dexp(x,rate=0.1,log=TRUE) }
DecrBD_prior_lambda <- function(x) { dexp(x,rate=10.0,log=TRUE) }
DecrBD_prior_alpha <- function(x) { dexp(x,rate=0.1,log=TRUE) }
priorsDecrBD <- c("turnover"=DecrBD_prior_delta,
"initial speciation"=DecrBD_prior_lambda,
"speciation decay"=DecrBD_prior_alpha)
likelihoodDecrBD <- function(params) {
DecrBD_speciation <- function(t) params[1] + params[2] * exp(-params[3]*t)
DecrBD_extinction <- function(t) params[1]
lnl <- tess.likelihood(times,
lambda = DecrBD_speciation,
mu = DecrBD_extinction,
samplingProbability = 1.0,
log = TRUE)
return (lnl)
}
samplesDecrBD <- tess.mcmc(likelihoodFunction = likelihoodDecrBD,
priors = priorsDecrBD,
parameters = runif(3,0,1),
logTransforms = c(TRUE,TRUE,TRUE),
delta = c(1,1,1),
iterations = 10000,
burnin = 1000,
thinning = 10,
adaptive = TRUE,
verbose = TRUE)
rateChangeTime <- max( times ) / 2
EpisodicBD_prior_delta_before <- function(x) { dexp(x,rate=10.0,log=TRUE) }
EpisodicBD_prior_tau_before <- function(x) { dexp(x,rate=10.0,log=TRUE) }
EpisodicBD_prior_delta_after <- function(x) { dexp(x,rate=10.0,log=TRUE) }
EpisodicBD_prior_tau_after <- function(x) { dexp(x,rate=10.0,log=TRUE) }
priorsEpisodicBD <- c("diversification before"=EpisodicBD_prior_delta_before,
"turnover before"=EpisodicBD_prior_tau_before,
"diversification after"=EpisodicBD_prior_delta_after,
"turnover after"=EpisodicBD_prior_tau_after)
likelihoodEpisodicBD <- function(params) {
EpisodicBD_speciation <- c(params[1]+params[2],params[3]+params[4])
EpisodicBD_extinction <- c(params[2],params[4])
lnl <- tess.likelihood.rateshift(times,
lambda = EpisodicBD_speciation,
mu = EpisodicBD_extinction,
rateChangeTimesLambda = rateChangeTime,
rateChangeTimesMu = rateChangeTime,
samplingProbability = 1.0,
log = TRUE)
return(lnl)
}
samplesEpisodicBD <- tess.mcmc(likelihoodFunction = likelihoodEpisodicBD,
priors = priorsEpisodicBD,
parameters = runif(4,0,1),
logTransforms = c(TRUE,TRUE,TRUE,TRUE),
delta = c(1,1,1,1),
iterations = 10000,
burnin = 1000,
thinning = 10,
adaptive = TRUE,
verbose = TRUE)
survivalProbability <- 0.1
MassExtinctionBD_prior_delta <- function(x) { dexp(x,rate=10.0,log=TRUE) }
MassExtinctionBD_prior_tau <- function(x) { dexp(x,rate=10.0,log=TRUE) }
MassExtinctionBD_prior_time <- function(x) { dunif(x,min=max(times)/2,max=max(times),log=TRUE)}
priorsMassExtinctionBD <- c("diversification"=MassExtinctionBD_prior_delta,
"turnover"=MassExtinctionBD_prior_tau,
"mass-extinction time"=MassExtinctionBD_prior_time)
likelihoodMassExtinctionBD <- function(params) {
MassExtinctionBD_speciation <- params[1]+params[2]
MassExtinctionBD_extinction <- params[2]
MassExtinctionBD_time <- params[3]
lnl <- tess.likelihood(times,
lambda = MassExtinctionBD_speciation,
mu = MassExtinctionBD_extinction,
massExtinctionTimes = MassExtinctionBD_time,
massExtinctionSurvivalProbabilities = survivalProbability,
samplingProbability = 1.0,
log = TRUE)
return (lnl)
}
samplesMassExtinctionBD <- tess.mcmc(likelihoodFunction = likelihoodMassExtinctionBD,
priors = priorsMassExtinctionBD,
parameters = c(runif(2,0,1),max(times)*3/4),
logTransforms = c(TRUE,TRUE,FALSE),
delta = c(1,1,1),
iterations = 10000,
burnin = 1000,
thinning = 10,
adaptive = TRUE,
verbose = TRUE)
marginalLikelihoodConstBD <- tess.steppingStoneSampling(
likelihoodFunction = likelihoodConstBD,
priors = priorsConstBD,
parameters = runif(2,0,1),
logTransforms = c(TRUE,TRUE),
iterations = 1000,
burnin = 100,
K = 50)
marginalLikelihoodDecrBD <- tess.steppingStoneSampling(
likelihoodFunction = likelihoodDecrBD,
priors = priorsDecrBD,
parameters = runif(3,0,1),
logTransforms = c(TRUE,TRUE,TRUE),
iterations = 1000,
burnin = 100,
K = 50)
marginalLikelihoodEpisodicBD <- tess.steppingStoneSampling(
likelihoodFunction = likelihoodEpisodicBD,
priors = priorsEpisodicBD,
parameters = runif(4,0,1),
logTransforms = c(TRUE,TRUE,TRUE,TRUE),
iterations = 1000,
burnin = 100,
K = 50)
marginalLikelihoodMassExtinctionBD <- tess.steppingStoneSampling(
likelihoodFunction = likelihoodMassExtinctionBD,
priors = priorsMassExtinctionBD,
parameters = c(runif(2,0,1),max(times)*3/4),
logTransforms = c(TRUE,TRUE,FALSE),
iterations = 1000,
burnin = 100,
K = 50)
candidateModels <- c("ConstBD"=marginalLikelihoodConstBD,
"DecrBD"=marginalLikelihoodDecrBD,
"EpisodicBD"=marginalLikelihoodEpisodicBD,
"MassExtinctionBD"=marginalLikelihoodMassExtinctionBD)
marginalLikelihoodGrid <- expand.grid(M0=names(candidateModels),
M1=names(candidateModels))
marginalLikelihoodGrid$BF <- 2 * (candidateModels[marginalLikelihoodGrid$M0] -
candidateModels[marginalLikelihoodGrid$M1])
marginalLikelihoodGrid <- marginalLikelihoodGrid[order(marginalLikelihoodGrid$BF,
decreasing=TRUE),]
marginalLikelihoodGrid
tmrca <- max( times )
simConstBD <- function(params) {
ConstBD_speciation <- params[1] + params[2]
ConstBD_extinction <- params[2]
repeat {
ConstBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = ConstBD_speciation,
mu = ConstBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (ConstBD_tree$Nnode > 1) break }
return (ConstBD_tree) }
treesConstBD <- tess.PosteriorPrediction(simConstBD,samplesConstBD)
# compute the number of species in each simulate ConstBD_tree
numTaxaConstBD <- c()
for (i in 1:length(treesConstBD)){
numTaxaConstBD[i] <- treesConstBD[[i]]$Nnode + 1 }
numTaxaPPDI_ConstBD <- quantile(numTaxaConstBD,prob=c(0.025,0.975))
observedGamma <- gammaStat(tree_object)
print(paste("Observed_Gamma","_",tree," ","=",observedGamma,sep = ""))
ConstBD_gammaPPDI <- quantile(ConstBD_ppt[[1]],prob=c(0.025,0.975))
ConstBD_ppt <- tess.PosteriorPredictiveTest(treesConstBD,tree_object,
gammaStat)
ConstBD_gammaPPDI <- quantile(ConstBD_ppt[[1]],prob=c(0.025,0.975))
plot(density(numTaxaConstBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_ConstBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesConstBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesConstBD))) ltt.lines(treesConstBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(ConstBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=ConstBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
simDecrBD <- function(params) {
DecrBD_speciation <- function(t) params[1] + params[2] * exp(-params[3]*t)
DecrBD_extinction <- function(t) params[1]
repeat {
DecrBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = DecrBD_speciation,
mu = DecrBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (DecrBD_tree$Nnode > 1) break }
return (DecrBD_tree) }
treesDecrBD <- tess.PosteriorPrediction(simDecrBD,samplesDecrBD)
# compute the number of species in each simulate DecrBD_tree
numTaxaDecrBD <- c()
for (i in 1:length(treesDecrBD)){
numTaxaDecrBD[i] <- treesDecrBD[[i]]$Nnode + 1 }
numTaxaPPDI_DecrBD <- quantile(numTaxaDecrBD,prob=c(0.025,0.975))
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
gammaStat)
DecrBD_gammaPPDI <- quantile(DecrBD_ppt[[1]],prob=c(0.025,0.975))
plot(density(numTaxaDecrBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_DecrBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesDecrBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesDecrBD))) ltt.lines(treesDecrBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(DecrBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=DecrBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
ltt.plot(treesDecrBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesDecrBD))) ltt.lines(treesDecrBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
simDecrBD <- function(params) {
DecrBD_speciation <- function(t) params[1] + params[2] * exp(-params[3]*t)
DecrBD_extinction <- function(t) params[1]
repeat {
DecrBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = DecrBD_speciation,
mu = DecrBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (DecrBD_tree$Nnode > 1) break }
return (DecrBD_tree) }
treesDecrBD <- tess.PosteriorPrediction(simDecrBD,samplesDecrBD)
# compute the number of species in each simulate DecrBD_tree
numTaxaDecrBD <- c()
for (i in 1:length(treesDecrBD)){
numTaxaDecrBD[i] <- treesDecrBD[[i]]$Nnode + 1 }
numTaxaPPDI_DecrBD <- quantile(numTaxaDecrBD,prob=c(0.025,0.975))
print(paste("numTaxaDecrBD","_",tree,"=",mean(numTaxaDecrBD),sep = ""))
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
gammaStat)
DecrBD_gammaPPDI <- quantile(DecrBD_ppt[[1]],prob=c(0.025,0.975))
par(mfrow=c(1,3))
plot(density(numTaxaDecrBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_DecrBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesDecrBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesDecrBD))) ltt.lines(treesDecrBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(DecrBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=DecrBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
plot(density(numTaxaConstBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_ConstBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesConstBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesConstBD))) ltt.lines(treesConstBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(ConstBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=ConstBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
simDecrBD <- function(params) {
DecrBD_speciation <- function(t) params[1] + params[2] * exp(-params[3]*t)
DecrBD_extinction <- function(t) params[1]
repeat {
DecrBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = DecrBD_speciation,
mu = DecrBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (DecrBD_tree$Nnode > 1) break }
return (DecrBD_tree) }
treesDecrBD <- tess.PosteriorPrediction(simDecrBD,samplesDecrBD)
# compute the number of species in each simulate DecrBD_tree
numTaxaDecrBD <- c()
for (i in 1:length(treesDecrBD)){
numTaxaDecrBD[i] <- treesDecrBD[[i]]$Nnode + 1 }
numTaxaPPDI_DecrBD <- quantile(numTaxaDecrBD,prob=c(0.025,0.975))
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
gammaStat)
DecrBD_gammaPPDI <- quantile(DecrBD_ppt[[1]],prob=c(0.025,0.975))
par(mfrow=c(1,3))
plot(density(numTaxaDecrBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_DecrBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesDecrBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesDecrBD))) ltt.lines(treesDecrBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(DecrBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=DecrBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
simEpisodicBD <- function(params) {
EpisodicBD_speciation <- c(params[1]+params[2],params[3]+params[4])
EpisodicBD_extinction <- c(params[2],params[4])
repeat {
EpisodicBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = EpisodicBD_speciation,
mu = EpisodicBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (EpisodicBD_tree$Nnode > 1) break }
return (EpisodicBD_tree) }
treesEpisodicBD <- tess.PosteriorPrediction(simEpisodicBD,samplesEpisodicBD)
# compute the number of species in each simulate EpisodicBD_tree
numTaxaEpisodicBD <- c()
for (i in 1:length(treesEpisodicBD)){
numTaxaEpisodicBD[i] <- treesEpisodicBD[[i]]$Nnode + 1 }
numTaxaPPDI_EpisodicBD <- quantile(numTaxaEpisodicBD,prob=c(0.025,0.975))
EpisodicBD_ppt <- tess.PosteriorPredictiveTest(treesEpisodicBD,tree_object,
gammaStat)
EpisodicBD_gammaPPDI <- quantile(EpisodicBD_ppt[[1]],prob=c(0.025,0.975))
plot(density(numTaxaEpisodicBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_EpisodicBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesEpisodicBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesEpisodicBD))) ltt.lines(treesEpisodicBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
par(mfrow=c(1,3))
plot(density(numTaxaEpisodicBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_EpisodicBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesEpisodicBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesEpisodicBD))) ltt.lines(treesEpisodicBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(EpisodicBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=EpisodicBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
mean(EpisodicBD_ppt[[1]] >= observedGamma)
simMassExtinctionBD <- function(params) {
MassExtinctionBD_speciation <- params[1]+params[2]
MassExtinctionBD_extinction <- params[2]
MassExtinctionBD_time <- params[3]
repeat {
MassExtinctionBD_tree <- tess.sim.age(n = 1,
age = tmrca,
lambda = MassExtinctionBD_speciation,
mu = MassExtinctionBD_extinction,
samplingProbability = 1.0,
MRCA = TRUE)[[1]]
if (MassExtinctionBD_tree$Nnode > 1) break }
return (MassExtinctionBD_tree) }
treesMassExtinctionBD <- tess.PosteriorPrediction(simMassExtinctionBD,samplesMassExtinctionBD)
# compute the number of species in each simulate MassExtinctionBD_tree
numTaxaMassExtinctionBD <- c()
for (i in 1:length(treesMassExtinctionBD)){
numTaxaMassExtinctionBD[i] <- treesMassExtinctionBD[[i]]$Nnode + 1 }
numTaxaPPDI_MassExtinctionBD <- quantile(numTaxaMassExtinctionBD,prob=c(0.025,0.975))
MassExtinctionBD_ppt <- tess.PosteriorPredictiveTest(treesMassExtinctionBD,tree_object,
gammaStat)
MassExtinctionBD_gammaPPDI <- quantile(MassExtinctionBD_ppt[[1]],prob=c(0.025,0.975))
par(mfrow=c(1,3))
plot(density(numTaxaMassExtinctionBD),main="Number of taxa",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=numTaxaPPDI_MassExtinctionBD,lty=2,col="gray",lwd=2) +
points(tree_object$Nnode+1,0,pch="x") + title(sub = "(A)", xlab = "Frequency")
ltt.plot(treesMassExtinctionBD[[1]],backward=FALSE,col="gray",log="y",
ylim=c(1,max(200)),main="LTT-plot") + ltt.lines(tree_object,backward=FALSE,lwd=3) +
for (i in 2:min(100,length(treesMassExtinctionBD))) ltt.lines(treesMassExtinctionBD[[i]], backward=FALSE, col="gray") + title(sub = "(B)")
plot(density(MassExtinctionBD_ppt[[1]]),main="Gamma Statistic",xlab="",
ylab="Posterior Predictive Density",lwd=2) + abline(v=MassExtinctionBD_gammaPPDI,lty=2,col="gray",lwd=2) +
points(observedGamma,0,pch="x") + title(sub = "(C)", xlab = "Gamma Value")
marginalLikelihoodGrid
plot(samplesConstBD)
observedGamma <- gammaStat(tree_object)
observedGamma
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
gammaStat)
DecrBD_ppt
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
observedGamma)
treesDecrBD
DecrBD_ppt <- tess.PosteriorPredictiveTest(samplesDecrBD,tree_object,
gammaStat)
samplesDecrBD
treesDecrBD
DecrBD_ppt <- tess.PosteriorPredictiveTest(treesDecrBD,tree_object,
gammaStat)
DecrBD_ppt
simDecrBD
samplesDecrBD
# compute the number of species in each simulate DecrBD_tree
numTaxaDecrBD <- c()
for (i in 1:length(treesDecrBD)){
numTaxaDecrBD[i] <- treesDecrBD[[i]]$Nnode + 1 }
numTaxaDecrBD
for (i in 1:length(treesDecrBD)){
numTaxaDecrBD[i] <- treesDecrBD[[i]]$Nnode + 1 }
numTaxaPPDI_DecrBD <- quantile(numTaxaDecrBD,prob=c(0.025,0.975))
numTaxaPPDI_DecrBD
summary(samplesConstBD)
marginalLikelihoodGrid
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
is.ultrametric(tree_object)
tree_object <- nnls.tree(cophenetic(tree_object), tree_object, rooted = TRUE)
tree_object
is.ultrametric(tree_object)
tree_object <- rescale(tree_object, model = "depth", 1)
is.ultrametric(tree_object)
plot(tree_object)
ltt.plot(tree_object)
times <- as.numeric(branching.times(tree_object))
times
gammaStat(tree_object)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
is.ultrametric()
is.ultrametric(tree_object)
tree_object <- rescale(tree_object, model = "depth",1)
is.ultrametric(tree_object)
is.ultrametric(tree_object)
tree_object <-  nnls.tree(cophenetic(scaled_tree), scaled_tree, rooted = TRUE)
tree_object <-  nnls.tree(cophenetic(tree_object), tree_object, rooted = TRUE)
is.ultrametric(tree_object)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
is.ultrametric(tree_object)
tree_object <-  nnls.tree(cophenetic(tree_object), tree_object, rooted = TRUE)
is.ultrametric(tree_object)
tree_object <- rescale(tree_object, model = "depth",1)
is.ultrametric(tree_object)
plot(tree_object)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
View(tree_object)
tree_object[["Nnode"]]
tree_object[["tip.label"]]
org_tree <- read.tree("./RelTime/input/Dataset1/inferenceTest.nwk")
root_org <- root(org_tree, "5", resolve.root = T)
chr_org_tree <- chronos(org_tree, lambda = 0, model = "discrete" )
plot(chronos)
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
org_tree <- read.tree("./RelTime/input/Dataset1/inferenceTest.nwk")
chr_org_tree <- chronos(org_tree, lambda = 1, model = "discrete" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
org_tree <- read.tree("./RelTime/input/Dataset1/inferenceTest.nwk")
chr_org_tree <- chronos(org_tree, lambda = 1, model = "correlated" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
chr_org_tree <- chronos(org_tree, lambda = 0, model = "correlated" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
is.ultrametric(chr_org_tree)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
is.ultrametric(tree_object)
chr_org_tree <- chronos(tree_object, lambda = 1, model = "correlated" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
tree_object <- read.tree("./RelTime/output/Dataset1/inferenceTest.nwk")
plot(tree_object)
tree_object <- read.tree("./RelTime/input/Dataset1/inferenceTest.nwk")
plot(tree_object)
chr_org_tree <- chronos(tree_object, lambda = 1, model = "correlated" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
tree_object <- read.tree("./RelTime/input/Dataset1/inferenceTest.nwk")
plot(tree_object)
chr_org_tree <- chronos(tree_object, lambda = 0, model = "correlated" )
plot(chr_org_tree)
is.ultrametric(chr_org_tree)
gammaStat(chr_org_tree)
ls(all.names = TRUE))
ls(all.names = TRUE)
rm(ls(all.names = TRUE))
rm(list = ls(all.names = TRUE))
#location
base_dir <- "/Users/eren/Documents/GitHub/Chapter3/"
input_dir <- "/Users/eren/Documents/GitHub/Chapter3/AlexTrees"
output_dir <- "/Users/eren/Documents/GitHub/Chapter3/UltrametricTrees"
list = ls()
#location
.base_dir <- "/Users/eren/Documents/GitHub/Chapter3/"
.input_dir <- "/Users/eren/Documents/GitHub/Chapter3/AlexTrees"
.output_dir <- "/Users/eren/Documents/GitHub/Chapter3/UltrametricTrees"
output_dir
#location
.base_dir <- "/Users/eren/Documents/GitHub/Chapter3/"
.input_dir <- "/Users/eren/Documents/GitHub/Chapter3/AlexTrees"
.output_dir <- "/Users/eren/Documents/GitHub/Chapter3/UltrametricTrees"
output_dir
.output_dir
library(ape)
library(phangorn)
library(dplyr)
library(TESS)
library(geiger)
tree <- read.tree("RelTime/input/Dataset1/inferenceTest.nwk")
View(tree)
tree$edge
length(tree$edge)
length(tree$tip.label)
